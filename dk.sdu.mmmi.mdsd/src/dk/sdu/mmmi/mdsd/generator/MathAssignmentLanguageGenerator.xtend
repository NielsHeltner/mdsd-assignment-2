/*
 * generated by Xtext 2.12.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Addition
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Division
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Literal
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Multiplication
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Subtraction
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Model
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.EvaluateExpression
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.VariableReference
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.VariableDeclaration

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathAssignmentLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(Model).head
		//System.out.println("Math expression = " + math.elements.display)
		math.elements.forEach[
			println(display)
		]
	}
	
	
	/**
	 * Start of recursive multi-dispatch methods for displaying an arithmetic expression's complete syntax tree
	 */
	def dispatch CharSequence display(VariableDeclaration element) {
		'''var «element.name» = «element.expression.display» «IF element.in !== null» in («element.in.display») «ENDIF»'''
	}
	
	def dispatch CharSequence display(EvaluateExpression element) {
		'''Result is = «element.expression.display»'''
	}
	
	def dispatch CharSequence display(Addition expression)
		'''(«expression.left.display» + «expression.right.display»)'''
	
	def dispatch CharSequence display(Subtraction expression)
		'''(«expression.left.display» - «expression.right.display»)'''
	
	def dispatch CharSequence display(Multiplication expression)
		'''(«expression.left.display» * «expression.right.display»)'''
	
	def dispatch CharSequence display(Division expression)
		'''(«expression.left.display» / «expression.right.display»)'''
	
	def dispatch display(Literal expression)
		'''«expression.value»'''
	
	def dispatch CharSequence display(VariableReference expression)
		'''«expression.variable.expression.display»'''
	
}