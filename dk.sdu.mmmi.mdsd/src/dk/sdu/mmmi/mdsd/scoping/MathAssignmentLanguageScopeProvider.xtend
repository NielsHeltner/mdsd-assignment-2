/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mmmi.mdsd.scoping

import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.MathAssignmentLanguagePackage
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.VariableDeclaration
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes

import static extension org.eclipse.xtext.EcoreUtil2.getAllContainers

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MathAssignmentLanguageScopeProvider extends AbstractMathAssignmentLanguageScopeProvider {
	
	/*
	 * Search for scope candidates of type VariableDeclaration for resolving a VariableReference.
	 * 
	 * Searching is done bottom-up to allow shadowing / locally overwriting variables.
	 */
	override getScope(EObject context, EReference reference) {
		if (reference == MathAssignmentLanguagePackage.eINSTANCE.variableReference_Variable) {
			val candidates = context.getAllContainers.filter(VariableDeclaration)
			return Scopes.scopeFor(candidates)
		}
		return super.getScope(context, reference)
	}

}
